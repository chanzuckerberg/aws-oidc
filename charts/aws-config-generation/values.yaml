ingressSgId: &ingressSgId ""
serviceAccountIamRole: &serviceAccountIamRole  "" 
serviceAccountName: &serviceAccountName ""
ingressSSLPolicy: &ingressSSLPolicy ""
ingressTags: &ingressTags ""

replicaCount: 2

namespace: ""

strategy: {
    rollingUpdate: {
      maxSurge: 25%, 
      maxUnavailable: 25%
    },
    type: RollingUpdate
}

image:
  repository: "docker.pkg.github.com/chanzuckerberg/aws-oidc/aws-oidc"
  pullPolicy: IfNotPresent
  tag: ""
  args: []
  envs:
    - name: AWS_REGION
      value: us-west-2
    - name: AWS_ORG_ROLE_ARNS
      value: arn:aws:iam::account-id:role/role-name

imagePullSecrets:
  - name: ""
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {
    eks.amazonaws.com/role-arn: *serviceAccountIamRole
  }
  name: *serviceAccountName
automountServiceAccountToken: true

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

dnsPolicy: ClusterFirst
restartPolicy: Always
schedulerName: default-scheduler

service:
  type: NodePort
  port: 80
  targetPort: 80

ingress:
  enabled: true
  annotations: {
    alb.ingress.kubernetes.io/actions.redirect:
      '{"Type": "redirect", "RedirectConfig": {"Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}',
    alb.ingress.kubernetes.io/backend-protocol: "HTTP",
    alb.ingress.kubernetes.io/healthcheck-path: "/health",
    alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP",
    alb.ingress.kubernetes.io/listen-ports:
      '[{"HTTP": 80, "HTTPS": 443}]',
    alb.ingress.kubernetes.io/scheme: "internet-facing",
    alb.ingress.kubernetes.io/security-groups: *ingressSgId,
    alb.ingress.kubernetes.io/ssl-policy: *ingressSSLPolicy,
    alb.ingress.kubernetes.io/subnets: *ingressSubnetIds,
    alb.ingress.kubernetes.io/success-codes: "200-399",
    alb.ingress.kubernetes.io/tags: *ingressTags,
    alb.ingress.kubernetes.io/target-group-attributes: "deregistration_delay.timeout_seconds=60",
    alb.ingress.kubernetes.io/target-type: "instance",
    kubernetes.io/ingress.class: "alb",
  }
  http:
    paths:
      - /*
  host:
    fqdn: placeholder.example
    paths: [
      /*
    ]
  tls: []

resources: {
  limits: {
    cpu: 300m,
    memory: 2Gi
  },
  requests: {
    cpu: 100m,
    memory: 1500Mi
  }
}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
